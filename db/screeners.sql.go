// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: screeners.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJobTracker = `-- name: CreateJobTracker :one
INSERT INTO job_tracker (job_id, user_id, job_status, job_created_at, job_updated_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, job_id, user_id, job_status, job_created_at, job_updated_at
`

type CreateJobTrackerParams struct {
	JobID        pgtype.UUID      `json:"job_id"`
	UserID       pgtype.UUID      `json:"user_id"`
	JobStatus    string           `json:"job_status"`
	JobCreatedAt pgtype.Timestamp `json:"job_created_at"`
	JobUpdatedAt pgtype.Timestamp `json:"job_updated_at"`
}

func (q *Queries) CreateJobTracker(ctx context.Context, arg CreateJobTrackerParams) (JobTracker, error) {
	row := q.db.QueryRow(ctx, createJobTracker,
		arg.JobID,
		arg.UserID,
		arg.JobStatus,
		arg.JobCreatedAt,
		arg.JobUpdatedAt,
	)
	var i JobTracker
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.UserID,
		&i.JobStatus,
		&i.JobCreatedAt,
		&i.JobUpdatedAt,
	)
	return i, err
}

const createScreener = `-- name: CreateScreener :one
INSERT INTO screeners (user_id, name, rules)
VALUES ($1, $2, $3)
RETURNING id, name, rules, stock_universe, user_id
`

type CreateScreenerParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Name   string      `json:"name"`
	Rules  []byte      `json:"rules"`
}

func (q *Queries) CreateScreener(ctx context.Context, arg CreateScreenerParams) (Screener, error) {
	row := q.db.QueryRow(ctx, createScreener, arg.UserID, arg.Name, arg.Rules)
	var i Screener
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Rules,
		&i.StockUniverse,
		&i.UserID,
	)
	return i, err
}

const deleteScreener = `-- name: DeleteScreener :exec
DELETE FROM screeners
WHERE id = $1
`

func (q *Queries) DeleteScreener(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteScreener, id)
	return err
}

const getJobTrackerByJobID = `-- name: GetJobTrackerByJobID :one
SELECT id, job_id, user_id, job_status, job_created_at, job_updated_at FROM job_tracker
WHERE job_id = $1
`

func (q *Queries) GetJobTrackerByJobID(ctx context.Context, jobID pgtype.UUID) (JobTracker, error) {
	row := q.db.QueryRow(ctx, getJobTrackerByJobID, jobID)
	var i JobTracker
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.UserID,
		&i.JobStatus,
		&i.JobCreatedAt,
		&i.JobUpdatedAt,
	)
	return i, err
}

const getJobTrackerByUserID = `-- name: GetJobTrackerByUserID :one
SELECT id, job_id, user_id, job_status, job_created_at, job_updated_at FROM job_tracker
WHERE user_id = $1
`

func (q *Queries) GetJobTrackerByUserID(ctx context.Context, userID pgtype.UUID) (JobTracker, error) {
	row := q.db.QueryRow(ctx, getJobTrackerByUserID, userID)
	var i JobTracker
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.UserID,
		&i.JobStatus,
		&i.JobCreatedAt,
		&i.JobUpdatedAt,
	)
	return i, err
}

const getScreener = `-- name: GetScreener :one
SELECT id, name, rules, stock_universe, user_id FROM screeners
WHERE id = $1
`

func (q *Queries) GetScreener(ctx context.Context, id int32) (Screener, error) {
	row := q.db.QueryRow(ctx, getScreener, id)
	var i Screener
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Rules,
		&i.StockUniverse,
		&i.UserID,
	)
	return i, err
}

const getScreeners = `-- name: GetScreeners :many
SELECT id, name, rules, stock_universe, user_id FROM screeners
WHERE user_id = $1
`

func (q *Queries) GetScreeners(ctx context.Context, userID pgtype.UUID) ([]Screener, error) {
	rows, err := q.db.Query(ctx, getScreeners, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Screener{}
	for rows.Next() {
		var i Screener
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Rules,
			&i.StockUniverse,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJobTrackerForExistingJob = `-- name: UpdateJobTrackerForExistingJob :one
UPDATE job_tracker
SET job_status = $2, job_updated_at = $3
WHERE job_id = $1
RETURNING id, job_id, user_id, job_status, job_created_at, job_updated_at
`

type UpdateJobTrackerForExistingJobParams struct {
	JobID        pgtype.UUID      `json:"job_id"`
	JobStatus    string           `json:"job_status"`
	JobUpdatedAt pgtype.Timestamp `json:"job_updated_at"`
}

func (q *Queries) UpdateJobTrackerForExistingJob(ctx context.Context, arg UpdateJobTrackerForExistingJobParams) (JobTracker, error) {
	row := q.db.QueryRow(ctx, updateJobTrackerForExistingJob, arg.JobID, arg.JobStatus, arg.JobUpdatedAt)
	var i JobTracker
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.UserID,
		&i.JobStatus,
		&i.JobCreatedAt,
		&i.JobUpdatedAt,
	)
	return i, err
}

const updateJobTrackerForNewJob = `-- name: UpdateJobTrackerForNewJob :one
UPDATE job_tracker
SET job_id = $2, job_status = $3, job_created_at = $4, job_updated_at = $5
WHERE user_id = $1
RETURNING id, job_id, user_id, job_status, job_created_at, job_updated_at
`

type UpdateJobTrackerForNewJobParams struct {
	UserID       pgtype.UUID      `json:"user_id"`
	JobID        pgtype.UUID      `json:"job_id"`
	JobStatus    string           `json:"job_status"`
	JobCreatedAt pgtype.Timestamp `json:"job_created_at"`
	JobUpdatedAt pgtype.Timestamp `json:"job_updated_at"`
}

func (q *Queries) UpdateJobTrackerForNewJob(ctx context.Context, arg UpdateJobTrackerForNewJobParams) (JobTracker, error) {
	row := q.db.QueryRow(ctx, updateJobTrackerForNewJob,
		arg.UserID,
		arg.JobID,
		arg.JobStatus,
		arg.JobCreatedAt,
		arg.JobUpdatedAt,
	)
	var i JobTracker
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.UserID,
		&i.JobStatus,
		&i.JobCreatedAt,
		&i.JobUpdatedAt,
	)
	return i, err
}

const updateScreener = `-- name: UpdateScreener :one
UPDATE screeners
SET name = $2, rules = $3, stock_universe = $4
WHERE id = $1
RETURNING id, name, rules, stock_universe, user_id
`

type UpdateScreenerParams struct {
	ID            int32  `json:"id"`
	Name          string `json:"name"`
	Rules         []byte `json:"rules"`
	StockUniverse string `json:"stock_universe"`
}

func (q *Queries) UpdateScreener(ctx context.Context, arg UpdateScreenerParams) (Screener, error) {
	row := q.db.QueryRow(ctx, updateScreener,
		arg.ID,
		arg.Name,
		arg.Rules,
		arg.StockUniverse,
	)
	var i Screener
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Rules,
		&i.StockUniverse,
		&i.UserID,
	)
	return i, err
}
