// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: watchlist.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWatchlist = `-- name: CreateWatchlist :one

INSERT INTO watchlist (name, user_id, stocks, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, user_id, stocks, created_at, updated_at
`

type CreateWatchlistParams struct {
	Name      string           `json:"name"`
	UserID    pgtype.UUID      `json:"user_id"`
	Stocks    []byte           `json:"stocks"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) CreateWatchlist(ctx context.Context, arg CreateWatchlistParams) (Watchlist, error) {
	row := q.db.QueryRow(ctx, createWatchlist,
		arg.Name,
		arg.UserID,
		arg.Stocks,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Watchlist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.Stocks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWatchlist = `-- name: DeleteWatchlist :exec

DELETE FROM watchlist
WHERE id = $1
`

func (q *Queries) DeleteWatchlist(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteWatchlist, id)
	return err
}

const getAllWatchlists = `-- name: GetAllWatchlists :many

SELECT id, name, user_id, stocks, created_at, updated_at FROM watchlist
WHERE user_id = $1
`

func (q *Queries) GetAllWatchlists(ctx context.Context, userID pgtype.UUID) ([]Watchlist, error) {
	rows, err := q.db.Query(ctx, getAllWatchlists, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Watchlist{}
	for rows.Next() {
		var i Watchlist
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.Stocks,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWatchlist = `-- name: GetWatchlist :one

SELECT id, name, user_id, stocks, created_at, updated_at FROM watchlist
WHERE id = $1
`

func (q *Queries) GetWatchlist(ctx context.Context, id int32) (Watchlist, error) {
	row := q.db.QueryRow(ctx, getWatchlist, id)
	var i Watchlist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.Stocks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateWatchlist = `-- name: UpdateWatchlist :one

UPDATE watchlist
SET name = $2, stocks = $3, updated_at = $4
WHERE id = $1
RETURNING id, name, user_id, stocks, created_at, updated_at
`

type UpdateWatchlistParams struct {
	ID        int32            `json:"id"`
	Name      string           `json:"name"`
	Stocks    []byte           `json:"stocks"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdateWatchlist(ctx context.Context, arg UpdateWatchlistParams) (Watchlist, error) {
	row := q.db.QueryRow(ctx, updateWatchlist,
		arg.ID,
		arg.Name,
		arg.Stocks,
		arg.UpdatedAt,
	)
	var i Watchlist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.Stocks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
